name: Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.22' # Укажите нужную версию Go

      - name: Build
        run: go build -o myapp ./cmd/myapp # Соберите ваше приложение

      - name: Build Docker Image
        run: |
          docker build -t myapp:latest . # Соберите Docker-образ из Dockerfile

      - name: Login to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }} # Имя пользователя Docker Hub
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }} # Пароль Docker Hub
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Push Docker Image to Docker Hub
        run: |
          docker tag myapp:latest $DOCKER_USERNAME/myapp:latest # Тегируйте образ
          docker push $DOCKER_USERNAME/myapp:latest # Загружайте образ на Docker Hub

      - name: Deploy to Server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}  # IP-адрес вашего сервера
          SERVER_USER: ${{ secrets.SERVER_USER }} # Имя пользователя для SSH
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }} # Пароль для SSH
        run: |
          # Установите sshpass
          sudo apt-get install sshpass

          # Перезапустите Docker-контейнер на сервере, загрузив образ с Docker Hub
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP << 'EOF'
            docker pull $DOCKER_USERNAME/myapp:latest # Загрузите образ с Docker Hub
            docker stop myapp || true # Остановите контейнер, если он работает
            docker rm myapp || true   # Удалите контейнер, если он существует
            docker run -d --name myapp -p 8585:8080 $DOCKER_USERNAME/myapp:latest # Запустите новый контейнер
          EOF
